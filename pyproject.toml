[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "smart-screenshot-tool"
version = "3.0.6"
description = "智能滚动截图工具 - 专为微信聊天记录取证和长页面截图而设计"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "智能截图工具开发团队", email = "support@screenshot-tool.com"}
]
maintainers = [
    {name = "智能截图工具开发团队", email = "support@screenshot-tool.com"}
]
keywords = ["screenshot", "automation", "evidence", "forensics", "gui"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
    "Topic :: Office/Business",
    "Topic :: Utilities"
]
requires-python = ">=3.7"
dependencies = [
    "Pillow>=8.0.0",
    "PyAutoGUI>=0.9.50",
    "numpy>=1.19.0",
    "pywinauto>=0.6.8",
    "keyboard>=0.13.5",
    "opencv-python>=4.5.0",
    "psutil>=5.8.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "pre-commit>=2.0"
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.0"
]

[project.urls]
Homepage = "https://github.com/your-org/smart-screenshot-tool"
Documentation = "https://github.com/your-org/smart-screenshot-tool/blob/main/README.md"
Repository = "https://github.com/your-org/smart-screenshot-tool"
"Bug Tracker" = "https://github.com/your-org/smart-screenshot-tool/issues"

[project.scripts]
smart-screenshot = "src.main:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

# 代码格式化配置
[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# 类型检查配置
[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# 测试配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# 覆盖率配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]